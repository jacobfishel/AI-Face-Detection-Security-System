# Cursor Coding Agent Rules File for Face Recognition Project

# Project Context:
# - Custom PyTorch model for face detection using WIDER FACE dataset.
# - Real-time webcam feed for detecting faces.
# - Unique faces vectorized and stored in a PostgreSQL database.
# - Non-new faces matched against database vectors and labeled with name.

rules:
  general:
    - NEVER overwrite existing working code unless explicitly instructed.
    - ALWAYS comment and explain any new code added.
    - NEVER introduce code that risks database corruption or security issues.
    - ALWAYS validate inputs and handle exceptions gracefully.

  coding_style:
    - Follow PEP8 for Python code.
    - Use type hints where applicable.
    - Write modular functions; avoid monolithic code blocks.
    - Avoid unnecessary imports and unused variables.

  pytorch_model:
    - Do NOT replace the existing model architecture without approval.
    - Optimize training loops for GPU usage if available.
    - Ensure loss functions and metrics match face detection tasks (e.g., multi-class or bounding box regression if applicable).
    - Ensure model output is compatible with the vectorization and database storage pipeline.

  webcam_processing:
    - Keep real-time processing efficient; avoid blocking calls.
    - Handle multiple faces in a frame.
    - Ensure detection results are consistent with stored vectors.

  vectorization:
    - Use a consistent vectorization method for all faces.
    - Normalize vectors before storing in the database.
    - Verify uniqueness of new vectors before database insertion.

  postgres_integration:
    - Always use parameterized queries to prevent SQL injection.
    - Handle database connection errors gracefully.
    - Ensure new faces are inserted correctly with unique IDs.
    - When matching faces, use an efficient search method (e.g., cosine similarity).
    - NEVER store raw images in the database; only store vectors and metadata.

  collaboration:
    - If a requested change could break existing functionality, warn first.
    - Ask for clarification if a task is ambiguous.
    - Suggest improvements only if they adhere strictly to the above rules.

  testing:
    - Add unit tests for new functions.
    - Ensure new code does not reduce detection accuracy or efficiency.
    - Include validation for vector uniqueness and database queries.

notes:
  - Cursor agent must strictly follow this rules file.
  - Any deviation should trigger a warning before implementing changes.
